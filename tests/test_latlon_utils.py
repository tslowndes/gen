import pytest
from latlon_util import *
from haversine import haversine

@pytest.mark.parametrize("pos1,pos2", [
    [[ -63.45950399,  117.38325579],
     [  43.90863396,    1.33345684]],
    [[ -23.98545756,  114.25335649],
     [ -13.88250637,  162.76994791]],
    [[-29.23115651, -90.77887603],
     [ 26.64160145,  91.01506756]],
    [[ -72.04461745, -117.77097468],
     [  -8.38821526,   54.51067938]],
    [[   6.50301028, -142.86424394],
     [  12.72348029,  101.84159308]],
    [[-87.44923271, -92.70601947],
     [ 15.97764929, -50.42141839]],
    [[ -62.80140642,  163.8148493 ],
     [  45.91194166,  -28.66567734]],
    [[-68.81821521, -98.26933327],
     [ 40.20253124, -93.32715973]],
    [[ -20.36176791,  155.6492419 ],
     [   3.02100534,  104.80736036]],
    [[-12.64763696,  72.30677203],
     [  3.14361751,  18.93242741]],
])

def test_find_dist2(pos1,pos2):
    expected_dist = haversine((pos1[1], pos1[0]), (pos2[1], pos2[0]))
    dist = find_dist2(pos1, pos2)/1000.0
    assert abs(dist - expected_dist) < 0.00001

@pytest.mark.parametrize("datum,loc,expected", [
    [(-1.27282500267, 60.4460754395),[-1.273736646, 60.4460754395],[-50.00004672834565, 0]],
])

def test_find_relative(datum, loc,expected):
    relloc = find_relative(datum,loc)
    assert (abs(relloc[0] - expected[0]) < 0.00000001 and
            abs(relloc[1] - expected[1]) < 0.00000001 )
